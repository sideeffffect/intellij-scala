// https://github.com/lampepfl/dotty/issues/15546

trait Foo[F[_]]

object Bug {
  def apply[F[_]: Foo](
      await: Boolean,
      whatever: Int = 0
  ): Nothing = ???

  def apply[F[_]: Foo]: Nothing =
    apply[F](false)
}

-----
ScalaFile
  PsiComment(comment)('// https://github.com/lampepfl/dotty/issues/15546')
  PsiWhiteSpace('\n\n')
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Bug
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bug')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ScContextBoundImpl(context bound)
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiWhiteSpace('\n      ')
              Parameter: await
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('await')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
              PsiElement(,)(',')
              PsiWhiteSpace('\n      ')
              Parameter: whatever
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('whatever')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace('\n  ')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Nothing
            CodeReferenceElement: Nothing
              PsiElement(identifier)('Nothing')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ScContextBoundImpl(context bound)
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Nothing
            CodeReferenceElement: Nothing
              PsiElement(identifier)('Nothing')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MethodCall
            GenericCall
              ReferenceExpression: apply
                PsiElement(identifier)('apply')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: F
                  CodeReferenceElement: F
                    PsiElement(identifier)('F')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              BooleanLiteral
                PsiElement(false)('false')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
